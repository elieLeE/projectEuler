#include "nbre.h"

#define LIMITE 1000000

int main(){
    int i = 0;
    int tabPrime[TAILLE_TAB] = {0};
    double phi_max = 0.0;
    int nbre_phi_max;
    remplissageTabPrime(tabPrime);

    double calcul;
    for(i=6; i<=LIMITE; i+=4){
		calcul = phi(i, tabPrime);
		if(calcul > phi_max){
			phi_max = calcul;
			nbre_phi_max = i;
		}
    }
    printf("phi max : %f, pour le nombre : %d\n", phi_max, nbre_phi_max);

    return 0;
}

    /*int tab[500000] = {1};
    int min = 3;
    int nbre = 4;
    bool complet = false;
    double max = 2, k;
    int i_max, i;
    int compt_aff = 0;

    for(i=0; i<LIMITE; i++, compt_aff++){
	if(compt_aff == 1000){
	    printf("%d\n", i);
	    compt_aff = 0;
	}
	if(complet){
	    tab[i] = phiC(nbre, nbre/((int)max));
	    //printf("pgcd complet => nbre : %d, phi : %d\n", nbre, tab[i]);
	}
	else{
	    tab[i] = tab[(i-1)/2] + phiNC(nbre, min, nbre/((int)(max)) - tab[(i-2)/2]);
	    //printf("pgcd non complet => nbre : %d, min : %d, phi : %d\n", nbre, min, tab[i]);
	    min = min +2;
	}
	//printf("nbre/tab|i] : %d/%d\n", nbre, tab[i]);
	k = (nbre*1.0)/tab[i];
	if(max < k){
	    max = k;
	    i_max = nbre;
	}
	//printf("%d => %d\n", nbre, tab[i]);
	//printf("\n");
	complet = !complet;
	nbre += 2;
    }

    //printf("nbre_max : %d, max : %f\n", i_max, max);*/
